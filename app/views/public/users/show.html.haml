.container-fluid
  .row.vh-100

    // 左のサイドバー
    .col.col-2.p-0
      .image(style="width: 100px; margin: auto;")
        = image_tag('logo.gif', width: "100%")

      // タブ
      %ul.nav.nav-tabs(id="myTab" role="tablist")
        %li.nav-item
          %a.nav-link.active(id="rooms-tab" data-toggle="tab" href="#rooms" role="tab" aria-controls="rooms" aria-selected="true")
            ルーム
        %li.nav-item
          %a.nav-link(id="friends-tab" data-toggle="tab" href="#friends" role="tab" aria-controls="friends" aria-selected="false")
            フレンド

      // タブの内容
      .tab-content(id="myTabContent")

        // ルーム一覧
        = render "public/users/room_index"

        // フレンド一覧
        = render "public/users/friends_index"

    // メイン画面
    .col.border-left
      // 画面右上にプルダウンメニューを表示
      .fixed-top
        .btn-group.float-right.mt-2.mr-2
          #button(type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false")
            <i class="fas fa-user"></i>
            = current_user.nickname
          .dropdown-menu.dropdown-menu-right.p-2
            .dropdown-item.my-1{"data-target" => "#modalUserEdit", "data-toggle" => "modal", type: "button" }
              ユーザーの編集
            = link_to 'ログアウト', destroy_user_session_path, method: :delete, class: "dropdown-item"

      // モーダルでユーザー編集画面を表示する記述
      = render "public/modal/user_edit"

      // ルーム選択時
      - if @room.present?
        %h1.room{ data: { room_id: @room.id } }
          = @room.name
          .d-flex
            // フレンド招待ボタン
            .btn.btn-sm.btn-success.my-1{"data-target" => "#modalRoomEntry", "data-toggle" => "modal", type: "button" }
              フレンド招待 <i class="fas fa-user-plus"></i>

            // 参加者一覧ボタン
            .btn.btn-sm.btn-success.my-1.ml-2{"data-target" => "#modalRoomUsers", "data-toggle" => "modal", type: "button"}
              参加者一覧 <i class="fas fa-users"></i>

            // ルーム編集ボタン（オーナーのみ表示させる）
            - if @room.owner_id == current_user.id
              .btn.btn-sm.btn-warning.my-1.ml-2{"data-target" => "#modalRoomEdit", "data-toggle" => "modal", type: "button"}
                ルーム編集 <i class="fas fa-edit"></i>

        // モーダルで参加者一覧画面を表示する記述
        = render "public/modal/room_users"

        // モーダルでフレンド招待画面を表示する記述
        = render "public/modal/room_entry"

        // モーダルでルーム編集画面を表示する記述
        = render "public/modal/room_edit"

        // チャット画面
        .container.p-0(id="data" data-chatroom-id="#{@room.id}" data-user-id="#{current_user.id}")

          //ルーム内でのメッセージの検索
          = form_with url: root_path, method: :get do |f|
            .input-group.mb-3
              = f.hidden_field :room_id, :value => @room.id
              = f.search_field :message_search_word, class: 'form-control'
              %span.input-group-btn.input-group-append
                = f.submit "メッセージ検索", class: 'btn btn-primary'

          //検索結果が存在しない時
          - if params[:message_search_word].present? && @search_messages.empty?
            %p検索した単語に合致するメッセージはありませんでした

          //検索結果の表示用のモーダルできれば検索時こっちが開くようにしたい
          - if @search_messages.present?
            .search_btn.d-none.btn.btn-sm.btn-success.my-1{"data-target" => "#modalSearchMessage", "data-toggle" => "modal", type: "button" }
              メッセージ検索結果

            //メッセージを表示するモーダル
            = render "public/modal/search_message"

          // メッセージ一覧（部分テンプレート化済み）
          // Websocketを介してサーバーからデータを受信した時に #messages に挿入されます
          #messages.scroll-list.jscroll(style="overflow-y: scroll; overflow-x: hidden; max-height: calc(100vh - 30vh);")
            .read_in
              // - @messages.each do |message|
              - @messages.each_with_index do |message, index|
                = render "public/messages/message", message: message, index: index
                // = paginate @messages

          // 投稿フォーム
          .row
            - if @room.entried?(current_user)
              // ルーム参加時
              = form_with model: Message.new, url: messages_path, method: :post, class: "input-group" do |f|
                = f.text_area :message, class: "form-control", rows: "3", data: { behavior: 'chatFormText' }
                = f.hidden_field :room_id, :value => @room.id, data: { behavior: 'chatFormRoomId' }
                .input-group-append
                  = f.submit "送信", class:"btn btn-outline-secondary", data: { behavior: 'chatFormSubmit' }
            - else
              // ルーム未参加時
              .text-center
                参加してメッセージを投稿しましょう
                - entry = @room.entries.find_by(user_id: current_user)
                = link_to '参加する', entry_path(entry.id), method: :patch

      - else
        %h1 ルーム未選択です


//タブの切替
:javascript
  window.onload = () => {
    let rooms = document.getElementById("rooms-tab");
    let friends = document.getElementById("friends-tab");

    let changeActive = 1;
    let myActive = localStorage.getItem("changeActive");

    // ページ読み込み時に発火
    // changeActiveの内容で、タブが切り替わる
    rooms.addEventListener("click", () => {
      changeActive = 1;
      localStorage.setItem("changeActive", changeActive);
      rooms.click();
    });

    friends.addEventListener("click", () => {
      changeActive = 2;
      localStorage.setItem("changeActive", changeActive);
      friends.click();
    });

    if (myActive == 1) {
      rooms.click();
    } else if (myActive == 2){
      friends.click();
    } else {

    };
  };

// 無限スクロール
:javascript
  $(document).on('turbolinks:load', function() {
    $('.jscroll').jscroll({ // 追加したdivのclass名と合わせる
      contentSelector: '.read_in',
      nextSelector: '.next a',  // 次ページリンクのセレクタ
      loadingHtml: '読み込み中',
      padding: 10,
      bind: 'append'
    });
  });

// ページ読み込み時に一番下までスクロール
:javascript
  $(document).on('turbolinks:load', function() {
    let element = document.getElementById('messages')
    element.scrollTop = element.scrollHeight - element.clientHeight;
  });

// メッセージの検索結果がある場合、検索結果のモーダルを展開する
:javascript
  $(document).on('turbolinks:load', function() {
    const btn = document.querySelector('.search_btn')
    const roomId = document.querySelector('.room').dataset.roomId;
    if (btn && roomId) {
      btn.click();
      history.replaceState('', '', `/?room_id=${roomId}`);
    }
  });

// 検索結果クリックで指定場所へスクロール(試作中)
:javascript
  document.querySelectorAll('.search_result_messages').forEach(function(el) {
    el.addEventListener('click', function() {
      var message_id = this.className.match(/message_(\d+)/)[1];
      console.log(message_id); // メッセージIDをコンソールに出力
      let id = document.getElementById(`message_${message_id}`)
      id.classList.add("active");
      console.log(id)
      let element = document.getElementById('messages')
      console.log(element)
      console.log(id.offsetTop)
      console.log(element.offsetTop)
      element.scrollTop = id.offsetTop - element.offsetTop;
      const closeBtn = document.querySelector('.close_btn')
      closeBtn.click();
    });
  });
